var e=Object.defineProperty,t=Object.defineProperties,a=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,i=(t,a,n)=>a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n,r=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&i(e,a,t[a]);if(n)for(var a of n(t))l.call(t,a)&&i(e,a,t[a]);return e};import{c as s,L as p}from"./clientRender.721053fb.js";import{M as m}from"./theme-interface.02c8e12d.js";const u={};function c(e){var i,c=e,{components:d}=c,h=((e,t)=>{var a={};for(var i in e)o.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(null!=e&&n)for(var i of n(e))t.indexOf(i)<0&&l.call(e,i)&&(a[i]=e[i]);return a})(c,["components"]);return s("wrapper",(i=r(r({},u),h),t(i,a({components:d,mdxType:"MDXLayout"}))),s("h1",null,"Page data"),s("p",null,s("strong",{parentName:"p"},"Essentially, vite-pages is a React app framework that collect your pages data and pass them to your theme.")," So what kinds of data does it collect?"),s("p",null,"Each page consists of two kinds of data:"),s("ul",null,s("li",{parentName:"ul"},"Static data"),s("li",{parentName:"ul"},"Runtime data")),s("p",null,"Both of these page data are passed to the theme so that it can render the app."),s("blockquote",null,s("p",{parentName:"blockquote"},"Fun fact: vite-pages itself doesn't render any concrete DOM node. All DOM nodes are rendered by ",s(p,{to:"/theme-customization",mdxType:"Link"},"theme"),".")),s("h2",null,"Static data"),s("p",null,"Static data usually contains the matadata of a page. Static data of ",s("strong",{parentName:"p"},"all pages")," is loaded ",s("strong",{parentName:"p"},"eagerly")," when the app bootstrap, so that the theme can render a side menu or a search box with this infomation."),s("blockquote",null,s("p",{parentName:"blockquote"},"You should try to keep the static data as small as possible.")),s("p",null,"For ",s("inlineCode",{parentName:"p"},".tsx|.jsx")," pages, you can define static data with ",s("strong",{parentName:"p"},"a docblock(comment) at the top of the file"),"."),s("pre",null,s("code",r({parentName:"pre"},{className:"language-tsx"}),"/**\n * @title index page\n * @tags tag1,tag2\n */\n")),s("p",null,"This will be collected as:"),s("pre",null,s("code",r({parentName:"pre"},{className:"language-json"}),'{ "title": "index page", "tags": "tag1,tag2" }\n')),s("p",null,"For ",s("inlineCode",{parentName:"p"},".md|.mdx")," pages, you can define static data with YAML front matter:"),s("pre",null,s("code",r({parentName:"pre"},{className:"language-md"}),"---\ntitle: my page\ntags:\n  - tag1\n  - tag2\n---\n")),s("p",null,"This will be collected as:"),s("pre",null,s("code",r({parentName:"pre"},{className:"language-json"}),'{ "title": "my page", "tags": ["tag1", "tag2"] }\n')),s("blockquote",null,s("p",{parentName:"blockquote"},"As you can see, YAML front matter can express some simple data structure(.e.g array), while a docblock's properties can only express strings. A qualified theme should understand both of these.")),s("h2",null,"Runtime data"),s("p",null,"Runtime page data is whatever value you export from a page file. It contains the actual content of the page."),s("p",null,"Most themes(.e.g ",s(p,{to:"/official-theme",mdxType:"Link"},"the official theme"),") ask users to ",s("inlineCode",{parentName:"p"},"export default")," a React component from each page file. But that is not a requirement from vite-pages core. We will talk about this later."),s("h2",null,"Difference"),s("p",null,"Both static data and runtime data are passed to the theme, so the theme can use them to render the app."),s("p",null,"Difference:"),s("ul",null,s("li",{parentName:"ul"},"Static data of ",s("strong",{parentName:"li"},"all pages")," is loaded ",s("strong",{parentName:"li"},"eagerly")," when the app bootstrap. So you should try to keep the static data small."),s("li",{parentName:"ul"},"Runtime data is loaded ",s("strong",{parentName:"li"},"lazily")," when user navigate to that page."),s("li",{parentName:"ul"},"The value type of static data is limited (string or simple object/array), while the value of runtime data can be any javascript value (.e.g a React component).")),s("h2",null,"How theme consume these data"),s("p",null,"As stated in ",s(p,{to:"/theme-customization",mdxType:"Link"},"the theme customization doc"),", a theme is a React component. It will be rendered by vite-pages core, and get useful info from props:"),s("ul",null,s("li",{parentName:"ul"},"All pages' static data"),s("li",{parentName:"ul"},"All runtime data that is already loaded"),s("li",{parentName:"ul"},"The current loading state of the app")),s("p",null,"Here is the interface of a theme:"),s(m,{mdxType:"ThemeInterface"}),s("blockquote",null,s("p",{parentName:"blockquote"},"Here is an example implementation of vite-pages theme: ",s("a",r({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/theme-doc/src/index.tsx"}),"vite-pages-theme-doc"),". ",s("a",r({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/use-theme-doc/pages/_theme.tsx"}),"This fixture")," demonstrate how to use it.")),s("h2",null,"Vite-pages core doesn't care what your page data looks like"),s("p",null,"Vite-pages itself doesn't care what the page data looks like. How to interpret the page data and render the view, is totally decided by ",s(p,{to:"/theme-customization",mdxType:"Link"},"the theme"),'. Vite-pages just collect your pages data and pass them to the theme. This design make the vite-pages core more "simple" and make themes more powerful.'),s("p",null,"Most themes(.e.g ",s(p,{to:"/official-theme",mdxType:"Link"},"the official theme"),") ask users to ",s("inlineCode",{parentName:"p"},"export default")," a React component from each page file. But that is not a requirement from vite-pages core."),s("h2",null,"Advanced topic: how vite-pages represent page data internally"),s("p",null,"Internally, vite-pages stores all pages' data inside a data structure like this:"),s("pre",null,s("code",r({parentName:"pre"},{className:"language-ts"}),'interface PagesData {\n  // pages are indexed by pageId which is route path like "/dir/page3"\n  [pageId: string]: {\n    // each page contains runtimeData and staticData\n    data: {\n      // the values are paths to the runtime data modules\n      [key: string]: string\n    }\n    staticData: {\n      // the values are serializable\n      [key: string]: any\n    }\n  }\n}\n')),s("h3",null,"Composed page data"),s("p",null,"You may wonder why runtimeData and staticData are maps and we use a ",s("inlineCode",{parentName:"p"},"key")," to index into them. This is because ",s("strong",{parentName:"p"},"vite-pages let users create a page with multiple data pieces that originate from multiple files.")),s("blockquote",null,s("p",{parentName:"blockquote"},"We use this feature in ",s("a",r({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/69a9a847813d677869d079c03ce6f08aa6167d69/packages/create-project/template-lib/vite.config.ts#L35"}),"the project scaffold"),". We use this feature to display demos from multiple files in one page. You can init this project with a command ",s("inlineCode",{parentName:"p"},"npm init vite-pages library-demo --template lib"),".")),s("p",null,"Most filesystem routing mechanism out there assume that each page map to only one file. But vite-pages doesn't enforce that rule! This make page data more flexible and programable."),s("p",null,"Checkout ",s(p,{to:"/advanced-fs-routing",mdxType:"Link"},"the advanced-fs-routing doc")," or ",s(p,{to:"/examples/component-library",mdxType:"Link"},'"Example: develop a component library"')," to learn more about how to create a page with multiple data pieces that originate from multiple files."))}c.isMDXComponent=!0;var d=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:c});const h={};h.main=d;export default h;
