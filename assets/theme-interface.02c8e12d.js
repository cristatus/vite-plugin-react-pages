var e=Object.defineProperty,n=Object.defineProperties,t=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,i=(n,t,a)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a,d=(e,n)=>{for(var t in n||(n={}))r.call(n,t)&&i(e,t,n[t]);if(a)for(var t of a(n))o.call(n,t)&&i(e,t,n[t]);return e};import{c as l}from"./clientRender.721053fb.js";const p={};function s(e){var i,s=e,{components:c}=s,y=((e,n)=>{var t={};for(var i in e)r.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&a)for(var i of a(e))n.indexOf(i)<0&&o.call(e,i)&&(t[i]=e[i]);return t})(s,["components"]);return l("wrapper",(i=d(d({},p),y),n(i,t({components:c,mdxType:"MDXLayout"}))),l("pre",null,l("code",d({parentName:"pre"},{className:"language-ts"}),"/** The type of a theme. */\nexport type Theme = React.ComponentType<ThemeProps>\n\nexport interface ThemeProps {\n  readonly loadedData: PagesLoaded\n  readonly loadState: LoadState\n}\n\n/**\n * A react hook to get static data.\n * import { useStaticData } from 'vite-plugin-react-pages/client'\n */\nexport interface UseStaticData {\n  (): PagesStaticData\n  (path: string): Record<string, any>\n}\n\n/**\n * All pages' static data.\n */\nexport interface PagesStaticData {\n  /**\n   * For each page, its static data is indexed by keys.\n   */\n  readonly [routePath: string]: Record<string, any>\n}\n\n/**\n * All runtime data that is already loaded.\n */\nexport interface PagesLoaded {\n  readonly [routePath: string]: PageLoaded\n}\n\n/**\n * For each page, its runtime data can be composed of multile modules.\n * These modules are indexed by keys.\n *\n * Normally, a page only contains one module, with the key being `main`.\n * And the default export of the main module is a React component,\n * which will render the page. In that case, `pageLoaded.main.default` is the component.\n */\nexport type PageLoaded = Record<string, any>\n\n/**\n * The current loading state of the app.\n */\nexport type LoadState =\n  | {\n      readonly type: 'loading' | 'loaded' | '404'\n      readonly routePath: string\n    }\n  | {\n      readonly type: 'load-error'\n      readonly routePath: string\n      readonly error?: any\n    }\n")))}s.isMDXComponent=!0;export{s as M};
