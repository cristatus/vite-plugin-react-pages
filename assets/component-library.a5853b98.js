var e=Object.defineProperty,n=Object.defineProperties,t=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,i=(n,t,a)=>t in n?e(n,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):n[t]=a,r=(e,n)=>{for(var t in n||(n={}))o.call(n,t)&&i(e,t,n[t]);if(a)for(var t of a(n))s.call(n,t)&&i(e,t,n[t]);return e};import{c as l,L as p}from"./clientRender.721053fb.js";const m={};function c(e){var i,c=e,{components:d}=c,u=((e,n)=>{var t={};for(var i in e)o.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&a)for(var i of a(e))n.indexOf(i)<0&&s.call(e,i)&&(t[i]=e[i]);return t})(c,["components"]);return l("wrapper",(i=r(r({},m),u),n(i,t({components:d,mdxType:"MDXLayout"}))),l("h1",null,"Example: develop a component library"),l("p",null,'This is an example of using "Advanced Filesystem Routing" inside a component library project.'),l("p",null,"Suppose you are developing a React component library. Your project have file structure like this:"),l("pre",null,l("code",r({parentName:"pre"},{className:"language-text"}),"src\n├── Button\n│   ├── demos\n│   │   ├── demo1.tsx\n│   │   └── demo2.tsx\n│   ├── index.tsx\n│   ├── style.module.css\n│   └── README.md\n├── Card\n│   ├── demos\n│   │   ├── demo1.tsx\n│   │   └── demo2.tsx\n│   ├── index.tsx\n│   ├── style.module.css\n│   └── README.md\n└── index.ts\n")),l("p",null,"You want to use vite as your local demo development environment (because it is blazingly fast). ",l("strong",{parentName:"p"},"How to collect all components and all demos from this project?")," The file structure doesn't follow the ",l(p,{to:"/fs-routing",mdxType:"Link"},"Basic Filesystem Routing Convention"),"."),l("p",null,"The answer: implement your own filesystem routing convention!"),l("pre",null,l("code",r({parentName:"pre"},{className:"language-ts"}),"// vite.config.ts\nimport type { UserConfig } from 'vite'\nimport * as path from 'path'\nimport reactRefresh from '@vitejs/plugin-react-refresh'\nimport mdx from 'vite-plugin-mdx'\nimport pages, { DefaultPageStrategy } from 'vite-plugin-react-pages'\n\nmodule.exports = {\n  plugins: [\n    reactRefresh(),\n    mdx(),\n    pages({\n      pagesDir: path.join(__dirname, 'pages'),\n      pageStrategy: new DefaultPageStrategy({\n        extraFindPages: async (pagesDir, helpers) => {\n          const srcPath = path.join(__dirname, 'src')\n\n          if (\"production\") {\n            // show all component demos during dev\n            // put them in page `/components/demos/${componentName}`\n            helpers.watchFiles(\n              srcPath,\n              '*/demos/**/*.{[tj]sx,md?(x)}',\n              async function fileHandler(file, api) {\n                const { relative, path: absolute } = file\n                const match = relative.match(\n                  /(.*)\\/demos\\/(.*)\\.([tj]sx|mdx?)$/\n                )\n                if (!match) throw new Error('unexpected file: ' + absolute)\n                const [_, componentName, demoName] = match\n                const pageId = `/components/demos/${componentName}`\n                // set page data\n                const runtimeDataPaths = api.getRuntimeData(pageId)\n                // the ?demo query will wrap the module with useful demoInfo\n                runtimeDataPaths[demoName] = `${absolute}?demo`\n              }\n            )\n          }\n\n          // find all component README\n          helpers.watchFiles(\n            srcPath,\n            '*/README.md?(x)',\n            async function fileHandler(file, api) {\n              const { relative, path: absolute } = file\n              const match = relative.match(/(.*)\\/README\\.mdx?$/)\n              if (!match) throw new Error('unexpected file: ' + absolute)\n              const [_, componentName] = match\n              const pageId = `/components/${componentName}`\n              // set page data\n              const runtimeDataPaths = api.getRuntimeData(pageId)\n              runtimeDataPaths.main = absolute\n              // set page staticData\n              const staticData = api.getStaticData(pageId)\n              staticData.main = await helpers.extractStaticData(file)\n            }\n          )\n        },\n      }),\n    }),\n  ],\n  resolve: {\n    alias: {\n      'my-lib': '/src',\n    },\n  },\n} as UserConfig\n")),l("p",null,"We use ",l("inlineCode",{parentName:"p"},"api.getRuntimeData(pageId)")," and ",l("inlineCode",{parentName:"p"},"api.getStaticData(pageId)")," inside fileHandlers to get the pageData object. We can mutate the data object, and vite-pages will update its pages accordingly."),l("p",null,"Checkout the complete example in ",l("a",r({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/create-project/template-lib/vite.config.ts"}),"the library project scaffold"),".\nYou can initialize this project with command: ",l("inlineCode",{parentName:"p"},"npm init vite-pages library-demo --template lib"),"."),l("h2",null,"Monorepo"),l("p",null,"In some cases, we want to publish each component in their own packages."),l("blockquote",null,l("p",{parentName:"blockquote"},"Monorepo has more advantages when components are complex and tend to evolve independently. If we use a single package to publish all these components like the above example, all components share a version number. If we need to introduce a breaking change in a component, we have to bump the major version of the whole package. But with the monorepo we only need to bump the major version of that sub-package. Users will be more confident to upgrade.")),l("p",null,"In that case, we create a seperate package to run vite-pages, collecting all components and their demos. The project setup will look like this:"),l("pre",null,l("code",r({parentName:"pre"},{className:"language-text"}),"packages\n├── Button\n│   ├── demos\n│   │   ├── demo1.tsx\n│   │   └── demo2.tsx\n│   ├── src\n│   │   ├── index.tsx\n│   │   └── style.module.css\n│   ├── package.json\n│   └── README.md\n├── Card\n│   ├── demos\n│   │   ├── demo1.tsx\n│   │   └── demo2.tsx\n│   ├── src\n│   │   ├── index.tsx\n│   │   └── style.module.css\n│   ├── package.json\n│   └── README.md\n├── demos\n│   ├── pages\n│   │   ├── index$.tsx\n│   │   └── _theme.tsx\n│   ├── index.html\n│   ├── package.json\n│   └── vite.config.ts\n└── package.json\n")),l("p",null,"Checkout the complete example in ",l("a",r({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/create-project/template-lib-monorepo/packages/demos/vite.demos.ts"}),"the lib-monorepo scaffold"),".\nYou can initialize this project with command: ",l("inlineCode",{parentName:"p"},"npm init vite-pages library-monorepo-demo --template lib-monorepo"),"."))}c.isMDXComponent=!0;var d=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:c});const u={};u.main=d;export default u;
